// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}
// testing mixin - sets background-color: $col !important; 
@mixin testing($col: red) {
	background-color: $col !important; 
}
@mixin page-squeeze($num: 2) {
	@include pad($num);
}
@mixin page {
  position: relative;
	@include span(full);
  @include susy-breakpoint($max-tab-p) {
		@include span(14 of 16 nest);
    @include pad(1 of 16);
  }
	//up to tablet landscap
	@include susy-breakpoint($tablet-portrait) {
		// Tablet-portrait and up
		@include span(14 of 16 nest);
		@include pad(2 of 16);
	};
	@include susy-breakpoint($tablet-landscape) {
		// Tablet-portrait and up
		@include span(12 of 16 nest);
		@include pad(3 of 16);
	};
	@include susy-breakpoint($desktop) {
		@include span(16 of 16 nest);
		@include pad(3 of 16);
	}
	// width: span(full);
	// @include page-squeeze;
}
@mixin navtabs($corner: 1em) {
  @include margin-leader(1);
  @include pad(1rem);
  border-radius: $corner;
}
@mixin nolink() {
	text-decoration: none;
	background-color: clear !important; 
}
@mixin button($butcol: $color__background-button) {
	// @include contrasted($butcol);
  background-color: $color__a-r;
	// &:hover {@include contrasted(adjust-lightness($butcol, 20));}
	@include nolink;
	border-radius: 2em;

}
//colour generator
@mixin colgen($base, $light: white, $dark: black){
	&:nth-child(3n) {background-color: $base;}
	&:nth-child(3n+1) {background-color: complement($base);}
	&:nth-child(3n+2) {background-color: mix($base, complement($base), 30);}
}
